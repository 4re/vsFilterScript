#pragma once
#include "VapourSynth.h"
#include "Utility.vxx"

enum struct ColorFamilies : int {
	Gray = 1000000,
	RGB = 2000000,
	YUV = 3000000
};

enum struct SampleTypes : int {
	Int = 0,
	Float = 1
};

struct VideoFormat {
	field(Name, std::array<char, 32>{});
	field(ID, 0);
	field(ColorFamily, ColorFamilies{});
	field(SampleType, SampleTypes{});
	field(BitsPerSample, 0);
	field(BytesPerSample, 0);
	field(HorizontalSubsamplingFactor, 0);
	field(VerticalSubsamplingFactor, 0);
	field(PlaneCount, 0);

public:
	auto IsSinglePrecision() const {
		return SampleType == SampleTypes::Float && BitsPerSample == 32;
	}
	auto IsRGB() const {
		return ColorFamily == ColorFamilies::RGB;
	}
	auto IsGray() const {
		return ColorFamily == ColorFamilies::Gray;
	}
	auto IsYUV() const {
		return ColorFamily == ColorFamilies::YUV;
	}
	auto Is444() const {
		return HorizontalSubsamplingFactor == 0 && VerticalSubsamplingFactor == 0;
	}
	auto operator<=>(auto&& OtherFormat) const {
		return ID <=> OtherFormat.ID;
	}
};

struct AudioFormat {
	//Placeholder for API v4.
};

struct VideoInfo {
	field(Format, VideoFormat{});
	field(FrameRateNumerator, 0_i64);
	field(FrameRateDenominator, 0_i64);
	field(Width, 0);
	field(Height, 0);
	field(FrameCount, 0);

public:
	auto WithConstantDimensions() const {
		return Width != 0 && Height != 0;
	}
	auto WithConstantFormat() const {
		return Format.ID != pfNone;
	}

public:
	auto ConvertToAPIv3CompatibleLayout(auto Core) const {
		return VSVideoInfo{
			.format = reinterpret_cast<const VSFormat*>(Core.Query(Format)),
			.fpsNum = FrameRateNumerator, .fpsDen = FrameRateDenominator,
			.width = Width, .height = Height, .numFrames = FrameCount, .flags = 0
		};
	}
};

struct AudioInfo {
	//Placeholder for API v4.
};

struct CoreInfo {
	field(Version, ""sv);
	field(CoreVersion, 0);
	field(APIVersion, 0);
	field(ThreadCount, 0);
	field(MaxFrameBufferSize, 0_i64);
	field(UsedFrameBufferSize, 0_i64);
};

enum struct ItemTypes {
	Int = 'i',
	Float = 'f',
	Data = 's',
	VideoNode = 'c',
	VideoFrame = 'v',
	Function = 'm',
	AudioNode,
	AudioFrame
};

enum struct MessageTypes {
	Debug = 0,
	Warning = 1,
	Critical = 2,
	Fatal = 3,
	Information
};

enum struct VideoFormats {
	None = 0,

	Gray8 = static_cast<int>(ColorFamilies::Gray) + 10,
	Gray16,
	GrayH,
	GrayS,

	YUV420P8 = static_cast<int>(ColorFamilies::YUV) + 10,
	YUV422P8,
	YUV444P8,
	YUV410P8,
	YUV411P8,
	YUV440P8,
	YUV420P9,
	YUV422P9,
	YUV444P9,
	YUV420P10,
	YUV422P10,
	YUV444P10,
	YUV420P16,
	YUV422P16,
	YUV444P16,
	YUV444PH,
	YUV444PS,
	YUV420P12,
	YUV422P12,
	YUV444P12,
	YUV420P14,
	YUV422P14,
	YUV444P14,

	RGB24 = static_cast<int>(ColorFamilies::RGB) + 10,
	RGB27,
	RGB30,
	RGB48,
	RGBH,
	RGBS
};