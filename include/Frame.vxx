#pragma once
#include "Owner.vxx"
#include "Metadata.vxx"

using FrameReference = Owner<VSFrameRef>;

template<typename SampleType = const void>
struct Frame : FrameReference {
	field(PropertyMap, static_cast<VSMap*>(nullptr));

public:
	Frame() = default;
	Frame(std::convertible_to<HandleType> auto&& Descriptor) : FrameReference{ Forward(Descriptor) } {
		if constexpr (std::is_const_v<SampleType>)
			this->PropertyMap = Utility::PointerDropQualifiers(VaporGlobals::API->getFramePropsRO(this->Handle));
		else
			this->PropertyMap = VaporGlobals::API->getFramePropsRW(this->Handle);
	}

public:
	auto Type() const {
		//Placeholder for API v4.
	}
	auto& QueryVideoFormat() const {
		auto FormatHandle = VaporGlobals::API->getFrameFormat(Handle);
		return reinterpret_cast<const VideoFormat&>(*FormatHandle);
	}
	auto QueryAudioFormat() const {
		//Placeholder for API v4.
	}
	auto Transfer() {
		return FrameReference{ Leak() };
	}
	auto operator[](std::convertible_to<std::string> auto&&) const;

public:
	template<std::derived_from<FrameReference> FrameType>
	operator FrameType() && {
		return { this->Leak() };
	}
	template<std::derived_from<FrameReference> FrameType>
	operator FrameType() const & {
		return { this->CloneHandle() };
	}
};

struct FrameContextWrapper {
	field(Handle, static_cast<VSFrameContext*>(nullptr));

public:
	template<typename FilterType>
	auto RaiseError(auto&& ErrorMessage) const {
		auto Caption = FilterType::Name + ": "s;
		auto DecoratedMessage = Caption + Forward(ErrorMessage);
		VaporGlobals::API->setFilterError(DecoratedMessage.data(), Handle);
		return FrameReference::NullHandle;
	}

public:
	auto QueryOutputIndex() const {
		return VaporGlobals::API->getOutputIndex(Handle);
	}
	operator auto() const {
		return Handle;
	}
};