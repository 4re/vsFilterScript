#pragma once
#include "Infrastructure.vxx"
#include "Owner.vxx"

using FrameReference = Owner<VSFrameRef>;

template<typename SampleType>
struct Frame : FrameReference {
	field(PropertyMap, static_cast<VSMap*>(nullptr));

public:
	Frame() = default;
	Frame(std::convertible_to<HandleType> auto&& Descriptor) : FrameReference{ Forward(Descriptor) } {
		if constexpr (std::is_const_v<SampleType>)
			this->PropertyMap = PointerRemoveConstant(VaporGlobals::API->getFramePropsRO(this->Handle));
		else
			this->PropertyMap = VaporGlobals::API->getFramePropsRW(this->Handle);
	}

public:
	auto Transfer() {
		return FrameReference{ Leak() };
	}
	auto operator[](std::convertible_to<std::string> auto&&);
};

struct FrameContextWrapper {
	field(Handle, static_cast<VSFrameContext*>(nullptr));

public:
	template<typename FilterType>
	auto RaiseError(auto&& ErrorMessage) {
		auto Caption = FilterType::Name + ": "s;
		auto DecoratedMessage = Caption + Forward(ErrorMessage);
		VaporGlobals::API->setFilterError(DecoratedMessage.data(), Handle);
		return FrameReference::NullHandle;
	}

public:
	auto RevealOutputIndex() {
		return VaporGlobals::API->getOutputIndex(Handle);
	}
	operator auto() {
		return Handle;
	}
};