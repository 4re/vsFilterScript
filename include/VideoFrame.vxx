#pragma once
#include "Frame.vxx"
#include "Plane.vxx"

template<typename PixelType, auto DirectAccess = false>
struct VideoFrame : Frame<PixelType>, VideoFormat {
	field(Format, static_cast<const VideoFormat*>(nullptr));

private:
	using PlaneType = Plane<PixelType, DirectAccess>;
	using typename FrameReference::HandleType;

public:
	field(Planes, std::array{ PlaneType{}, PlaneType{}, PlaneType{} });

public:
	VideoFrame() = default;
	VideoFrame(std::convertible_to<HandleType> auto&& Descriptor) : Frame<PixelType>{ Forward(Descriptor) } {
		auto& ReferenceFormat = this->QueryVideoFormat();
		auto ConstructPlane = [this](auto Index) {
			auto Width = VaporGlobals::API->getFrameWidth(this->Handle, Index);
			auto Height = VaporGlobals::API->getFrameHeight(this->Handle, Index);
			auto Stride = VaporGlobals::API->getStride(this->Handle, Index) / sizeof(PixelType);
			auto GetPlanePointer = [&] {
				if constexpr (std::is_const_v<PixelType>)
					return VaporGlobals::API->getReadPtr(this->Handle, Index);
				else
					return VaporGlobals::API->getWritePtr(this->Handle, Index);
			};
			return PlaneType{ GetPlanePointer(), Width, Height, Stride, PaddingFunctions::Plane::Default };
		};
		auto SynchronizeFormat = [&] {
			auto& FlattenedFormat = static_cast<VideoFormat&>(*this);
			FlattenedFormat = ReferenceFormat;
		};
		this->Format = &ReferenceFormat;
		SynchronizeFormat();
		for (auto Index : Range{ this->PlaneCount })
			Planes[Index] = ConstructPlane(Index);
	}

public:
	auto& operator[](std::integral auto x) const {
		return Planes[x];
	}
	using Frame<PixelType>::operator[];
};