#pragma once
#include "Utility.vxx"
#include "Globals.vxx"

template<typename ManagedType>
struct Owner {
	field(Handle, static_cast<ManagedType*>(nullptr));

protected:
	using HandleType = const ManagedType*;

public:
	static constexpr auto NullHandle = static_cast<HandleType>(nullptr);

public:
	Owner() = default;
	Owner(std::convertible_to<HandleType> auto&& Descriptor) {
		auto ManagedHandle = static_cast<HandleType>(Forward(Descriptor));
		this->Handle = Utility::PointerDropQualifiers(ManagedHandle);
	}

public:
	Owner(const Owner& OtherOwner) {
		*this = OtherOwner;
	}
	Owner(Owner&& OtherOwner) {
		*this = std::move(OtherOwner);
	}
	auto& operator=(const Owner& OtherOwner) {
		if (this != &OtherOwner) {
			this->ReleaseHandle();
			this->Handle = OtherOwner.CloneHandle();
		}
		return *this;
	}
	auto& operator=(Owner&& OtherOwner) {
		if (this != &OtherOwner)
			std::swap(this->Handle, OtherOwner.Handle);
		return *this;
	}

public:
	~Owner() {
		this->ReleaseHandle();
	}

public:
	auto IsEmpty() const {
		return Handle == NullHandle;
	}
	auto Leak() {
		auto TransferredHandle = Handle;
		Handle = nullptr;
		return Utility::PointerAddConstQualifier(TransferredHandle);
	}

protected:
	auto CloneHandle() const {
		if constexpr (SubtypeOf<HandleType, const VSFrameRef*>)
			return Utility::PointerDropQualifiers(VaporGlobals::API->cloneFrameRef(Handle));
		if constexpr (SubtypeOf<HandleType, const VSNodeRef*>)
			return VaporGlobals::API->cloneNodeRef(Handle);
		if constexpr (SubtypeOf<HandleType, const VSFuncRef*>)
			return VaporGlobals::API->cloneFuncRef(Handle);
	}
	auto ReleaseHandle() {
		if constexpr (SubtypeOf<HandleType, const VSFrameRef*>)
			VaporGlobals::API->freeFrame(Handle);
		if constexpr (SubtypeOf<HandleType, const VSNodeRef*>)
			VaporGlobals::API->freeNode(Handle);
		if constexpr (SubtypeOf<HandleType, const VSFuncRef*>)
			VaporGlobals::API->freeFunc(Handle);
	}
};

template<auto Managed>
struct MapReference {
	field(Handle, static_cast<VSMap*>(nullptr));

private:
	using HandleType = const VSMap*;

public:
	MapReference() = default;
	MapReference(std::convertible_to<HandleType> auto&& Descriptor) {
		auto MapHandle = static_cast<HandleType>(Forward(Descriptor));
		this->Handle = Utility::PointerDropQualifiers(MapHandle);
	}

public:
	MapReference(const MapReference&) = delete;
	MapReference(MapReference&&) = delete;
	auto& operator=(const MapReference&) = delete;
	auto& operator=(MapReference&&) = delete;

public:
	~MapReference() {
		if constexpr (Managed == false)
			if (this->Handle != nullptr)
				VaporGlobals::API->freeMap(this->Handle);
	}

public:
	auto Leak() {
		auto TransferredHandle = Handle;
		Handle = nullptr;
		return Utility::PointerAddConstQualifier(TransferredHandle);
	}
};