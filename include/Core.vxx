#pragma once
#include "Plugin.vxx"

struct VaporCore final {
	self(Instance, static_cast<VSCore*>(nullptr));
	auto FetchFormat(auto FormatID) const {
		return reinterpret_cast<const VideoFormat*>(VaporGlobals::API->getFormatPreset(FormatID, Instance));
	}
	auto AllocateFrame(std::convertible_to<const VideoFormat*> auto Format, auto Width, auto Height) const {
		return VaporGlobals::API->newVideoFrame(reinterpret_cast<const VSFormat*>(Format), Width, Height, nullptr, Instance);
	}
	auto AllocateFrame(auto FormatID, auto Width, auto Height) const {
		return VaporGlobals::API->newVideoFrame(reinterpret_cast<const VSFormat*>(FetchFormat(FormatID)), Width, Height, nullptr, Instance);
	}
	auto CopyFrameProperties(auto&& Source, auto&& Destination) {
		VaporGlobals::API->copyFrameProps(Source.Handle, Destination.Handle, Instance);
	}
	auto CreateNewFrameFrom(auto&& ReferenceFrame) {
		using PixelType = std::decay_t<decltype(ReferenceFrame[0][0][0])>;
		auto Format = ReferenceFrame.Format;
		auto Width = ReferenceFrame[0].Width;
		auto Height = ReferenceFrame[0].Height;
		auto Properties = ReferenceFrame.Handle;
		auto AllocatedFrame = VaporGlobals::API->newVideoFrame(reinterpret_cast<const VSFormat*>(Format), Width, Height, Properties, Instance);
		return VideoFrame<PixelType>{ AllocatedFrame };
	}
	auto CopyFrame(auto&& ReferenceFrame) {
		using PixelType = std::decay_t<decltype(ReferenceFrame[0][0][0])>;
		auto CopiedFrame = VaporGlobals::API->copyFrame(ReferenceFrame.Handle, Instance);
		return VideoFrame<PixelType>{ CopiedFrame };
	}
	auto operator[](auto&& Namespace) {
		auto PluginHandle = VaporGlobals::API->getPluginByNs(ExposeCString(Namespace), Instance);
		if (PluginHandle == nullptr)
			throw "No attribute with the name "s + Namespace + " exists. Missing plugin?";
		return Plugin{ PluginHandle };
	}
	operator auto() {
		return Instance;
	}
};