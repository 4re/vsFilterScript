#pragma once
#include "Utility.vxx"
#include "ResourceManager.vxx"

using FunctionReference = Owner<VSFuncRef>;

struct Function : FunctionReference {
	Function() = default;
	Function(std::convertible_to<HandleType> auto&& Descriptor) : FunctionReference{ Forward(Descriptor) } {}

public:
	auto operator()(auto&& ...Arguments) const {
		auto ArgumentMap = Utility::Map::Create();
		auto ResultMap = Utility::Map::Create();
		if constexpr (sizeof...(Arguments) != 0)
			Utility::Map::Fill(ArgumentMap.Handle, Forward(Arguments)...);
		VaporGlobals::API->callFunc(Handle, ArgumentMap.Handle, ResultMap.Handle, nullptr, nullptr);
		if (auto [EvaluationFailed, ErrorMessage] = Utility::Map::CheckForError(ResultMap.Handle); EvaluationFailed)
			throw RuntimeError{ ErrorMessage };
		return Utility::Map::AccessItem<true, false>(ResultMap.Leak(), "val");
	}
};